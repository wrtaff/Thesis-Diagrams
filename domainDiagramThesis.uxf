<?xml version="1.0" encoding="UTF-8" standalone="no"?><umlet_diagram><help_text>ET// Uncomment the following line to change the fontsize:
// fontsize=14


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on UML elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use Â± or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text><zoom_level>6</zoom_level><element><type>com.umlet.element.base.Class</type><coordinates><x>378</x><y>402</y><w>204</w><h>252</h></coordinates><panel_attributes>
:ClientCommunicator
 
--
 
ccSocket : Socket
outPrintStream: PrintStream
db : ClientDatabase
keyname : String
 
--
 

+ClientCommunicator(Socket, ClientDatabase)
+run() : void
-ccListenerStarter : void
+terminateSession : void
+sendMessage2Client(String) : void
+getKeyname() : String
+setKeyname(String) : void
 
--
 
Responsibilities
-- Estab/Maintain comms
  with RemoteClients
-- Handles downlink comms btw 
   CommandServer and Clients</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>288</x><y>168</y><w>132</w><h>168</h></coordinates><panel_attributes>
:CandCserver
 
--


NO ATTRIBUTES


--
main(String[]): void

--
Responsibilities
-- Top Level Class
-- Initializes UI and dbase.
-- The Listener Socket for
 the server. Runs as a 
separate thread; started 
by the server, and sits 
and waits for connections. 
Once connection is made, 
spawns ClientCommunicator
and passes socket to it.
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>534</x><y>150</y><w>264</w><h>198</h></coordinates><panel_attributes>
:ClientDatabase
 
--
 
-dbase: SortedMap&lt;java.lang.String,ClientRecord&gt;
 

--
 
+ ClientDatabase
+createRecord(String hostID, String exerciseID): Bool
+deleteRecord(String hostID): Bool
-getRecord(String hostID)
+printRecords(String hostID)
+halt__module() ####(not yet incorporated)
+run_module(int ModuleNumber)

 
--
 
Responsibilities
The database of ClientRecords. 
Uses a TreeMap (for now) as the data structure,
 and ClientRecords as the nodes.   Also 
holds the functions that control the bot, 
typically called from the UI.  </panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>618</x><y>408</y><w>168</w><h>222</h></coordinates><panel_attributes>
:ClientRecord
 
--
 
-uid_Host: String (#key#)
-ccProcess: ClientCommunicator
-uid_ExerciseNetwork: String
-status: String
-inbox: String
--
getClientInbox():String

getClientStatus():String

getUID_ExerciseNetwork():String

getUID_Host():String

setClientInbox(String message):

setClientStatus(String message)

setExerciseNetwork(String message)
 
--
Responsibilities
ClientRecord - the records in the database. 
Includes all fields associated with a single 
client, except for it's uid, which the record 
is keyed by in the database. </panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>648</x><y>336</y><w>66</w><h>84</h></coordinates><panel_attributes>lt=-
m1= 1
m2= n
has_a&gt;</panel_attributes><additional_attributes>12;12;12;36;54;36;54;72</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>408</x><y>216</y><w>138</w><h>30</h></coordinates><panel_attributes>lt=-
m1= 1
m2= 1
spawns_a&gt;</panel_attributes><additional_attributes>12;18;126;18</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>48</x><y>162</y><w>150</w><h>168</h></coordinates><panel_attributes>
:CandCserverMenuUI
 
--
 
- db : ClientDatabase
 
--
 
+run() : void
-mod(String) : void
-halt(String) : void
-print(String) : void
 
--
 
Responsibilities
-- console
interface for program</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>294</x><y>696</y><w>126</w><h>138</h></coordinates><panel_attributes>
:RemoteClient
 
--

what attributes?
 



--
+getStatus(): String
 

--
Responsibilities
-- Rides on remote host
-- Executes Remote cmds
-- Asks for periodic</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Note</type><coordinates><x>444</x><y>702</y><w>84</w><h>60</h></coordinates><panel_attributes>_Messages Down_
GETNAME
INBOX=XXXX



</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>354</x><y>648</y><w>266</w><h>60</h></coordinates><panel_attributes>lt=-
m1= 1
m2= 1
&lt; has_TCP_downlink_to                                                  
</panel_attributes><additional_attributes>144;6;144;24;144;30;12;30;12;48</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>207</x><y>180</y><w>114</w><h>44</h></coordinates><panel_attributes>-
m1= 1
m2= 1
&lt;spawns_a</panel_attributes><additional_attributes>102;18;9;18</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>336</x><y>330</y><w>162</w><h>84</h></coordinates><panel_attributes>lt=-
m1= 1
m2= n
spawns/passes client socket to&gt;</panel_attributes><additional_attributes>12;6;12;36;150;36;150;72</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>96</x><y>102</y><w>594</w><h>72</h></coordinates><panel_attributes>lt=-
m1= 1
m2= 1
interfaces_with&gt;</panel_attributes><additional_attributes>12;60;12;18;582;18;582;48</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>150</x><y>432</y><w>168</w><h>222</h></coordinates><panel_attributes>
:ClientCommunicatorListener
 
--
 
inStream: PrintStream
inBufferedReader : BufferedReader
parentCC : ClientCommunicator
db : ClientDatabase
  
--
  
+CClientCommunicatorListener(
  InputStream,ClientDatabase, 
  ClientCommunicator )
-run();
-listenLoop() : void
-setVariableValue(String)
 
--
 
Responsibilities
-- Handles uplink from Clients to
   CommandServer</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>228</x><y>642</y><w>108</w><h>66</h></coordinates><panel_attributes>lt=-
m1= 1
m2= 1
&lt;has_TCP_uplink_to
</panel_attributes><additional_attributes>12;12;12;36;96;36;96;54</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>313</x><y>510</y><w>78</w><h>44</h></coordinates><panel_attributes>-
m1= 1
m2= 1
&lt;spawns_a</panel_attributes><additional_attributes>66;18;5;18</additional_attributes></element><element><type>com.umlet.element.base.Note</type><coordinates><x>168</x><y>702</y><w>96</w><h>72</h></coordinates><panel_attributes>_Messages Up_
STATUS=XXXX
NAME=XXXX
EX_ID=XXXX
GETINBOX
QUIT

</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Note</type><coordinates><x>18</x><y>18</y><w>102</w><h>66</h></coordinates><panel_attributes>UI commands
PRINT:ALL
HALT:ALL
MOD_0:ALL
MOD_1:ALL
MOD_2:ALL
</panel_attributes><additional_attributes/></element></umlet_diagram>